@PointClass base(BaseEntityPoint, DamageFilter) 
	color(200 0 0) 
	iconsprite("editor/logic_playerproxy.vmt")
= logic_playerproxy: "An entity that is used to relay inputs/outputs to the player and back to the world."
	[
	// Inputs
	input RequestPlayerHealth[+HL2_ENTITIES, -P2CE](void) : "Requests the current player's health from the proxy. This will fire the PlayerHealth output with the value. (Episodic only)"
	input RequestAmmoState[+HL2_ENTITIES, -P2CE](void) : "Request the ammo state of the player. It will fire PlayerHasAmmo or PlayerHasNoAmmo outputs. (Episodic only)"
	input SetFlashlightSlowDrain[+HL2_ENTITIES, -P2CE](void) : "Puts the player's flashlight in slow-power-drain mode (for Episodic darkness)"
	input SetFlashlightNormalDrain[+HL2_ENTITIES, -P2CE](void) : "Puts the player's flashlight to default power drain. (Episodic only)"
	input SetPlayerHealth[+HL2_ENTITIES, -P2CE](integer)  : "Sets the player's health to this value. (Episodic only)"
	input SetMaxInputArmor[+HL2_ENTITIES, -P2CE](integer) : "Sets the maximum armor value that could be set by armor inputs. (Episodic only)"
	input EnableCappedPhysicsDamage[+HL2_ENTITIES, -P2CE](void) : "Cause player to take less damage from physics objects, and never more than 30 points from any individual strike. (Episodic only)"
	input DisableCappedPhysicsDamage[+HL2_ENTITIES, -P2CE](void) : "Undo effects of EnableCappedPhysicsDamage (Episodic only)"
	input SetLocatorTargetEntity[+HL2_ENTITIES, -P2CE](string) : "Set the entity that the HUD locator should track. (Usually a vehicle) (Episodic only)"
	
	input AddPotatosToPortalgun[P2CE](void) : "Change portalgun bodygroup to show potatos."
	input RemovePotatosFromPortalgun[P2CE](void) : "Change portalgun bodygroup to not show potatos."
	input SetDropEnabled[P2CE](boolean) : "Set wether the player is allowed to drop a carried object."
	input ForceVMGrabController[P2CE](void) : "Force the player to use the view model grab controller for all objects that are picked up."
	input ForcePhysicsGrabController[P2CE](void) : "Force the player to use the physics grab controller for all objects that are picked up."
	input ResetGrabControllerBehavior[P2CE](void) : "Resets the grab controller used by the player to its default behavior."
	input SetMotionBlurAmount[P2CE](float) : "Forces the motion blur effect on the player. Set to < 0 to disable this override."
	input GivePortalGunFull[P2CE](void) : "Gives the player a portal gun with both colors. (Overrides if player is already holding one)"
	input GivePortalGunPrimary[P2CE](void) : "Gives the player a portal gun with primary color. (Overrides if player is already holding one)"
	input GivePortalGunSecondary[P2CE](void) : "Gives the player a portal gun with only secondary color. (Overrides if player is already holding one)"
	input GivePortalGunNone[P2CE](void) : "Gives the player a portal gun with no activated colors. (Overrides if player is already holding one)"
	input GiveBoots[P2CE](void) : "Gives the player long fall boots."
	input RemoveBoots[P2CE](void) : "Removes long fall boots from the player, if they have them."
	input GivePaintGunFull[P2CE](void) : "Gives the player a fully upgraded paint gun."
	input GivePaintGunBasic[P2CE](void) : "Gives the player a non-upgraded paint gun."
	input RemovePortalGun[P2CE](void) : "Removes the portal gun from the player, if they have it."
	input RemovePaintGun[P2CE](void) : "Removes the paint gun from the player, if they have it."
	input LowerWeapon[P2CE](void) : "Lowers the weapon, setting it to a disabled state."
	input SetFallDamageEnabled(boolean) : "Whether or not fall damage is enabled"
	
	// Outputs
	output PlayerHealth[+HL2_ENTITIES, -P2CE](integer) : "The player's current health value, fired in response to RequestPlayerHealth. (Episodic only)"
	output PlayerHasAmmo[+HL2_ENTITIES, -P2CE](void)   : "Fired by request if the player has any ammo. (Episodic only)"
	output PlayerHasNoAmmo[+HL2_ENTITIES, -P2CE](void) : "Fired by request if the player doesn't have any ammo. (Episodic only)"
	output OnFlashlightOn[+HL2_ENTITIES, -P2CE](float) : "Fired when the player turns on their flashlight. This output has the value of how much energy the player had when this happened [0..1]. (Episodic only)"
	output OnFlashlightOff[+HL2_ENTITIES, -P2CE](float) : "Fired when the player turns off their flashlight. This output has the value of how much energy the player had when this happened [0..1]. (Episodic only)"
	output PlayerMissedAR2AltFire[+HL2_ENTITIES, -P2CE](void)	: "Player fired an AR2 combine ball that didn't kill any enemies. (Episodic only)"
	
	output PlayerDied(void) : "Fires when the player dies."
	output OnStartSlowingTime(void) : "Fired when a Portal player initiates slow time."
	output OnStopSlowingTime(void) : "Fired when a Portal player stops slowing time."
	output OnPrimaryPortalPlaced[P2CE](void) : "Fired when a Portal player successfully places the primary portal."
	output OnSecondaryPortalPlaced[P2CE](void) : "Fired when a Portal player successfully places the secondary portal."
	output OnCoopPing[P2CE](void) : "Fired when a Portal player pings in coop."
	output OnDuck(void) : "Fired when a player starts to duck."
	output OnUnDuck(void) : "Fired when a player releases the duck button."
	output OnJump(void) : "Fired when a player jumps."
	]
