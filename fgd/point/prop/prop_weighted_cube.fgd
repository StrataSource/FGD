@PointClass base(BasePropPhysics) 
	appliesto(P2CE)
	studioprop() 
= prop_weighted_cube: "Aperture Science Weighted Cube. Presses floor buttons, and can be moved around."
	[
	line_cube[-engine](string) readonly : "----------------------------------------------------------------------------------------------------------" : ""
	
	CubeBehavior[engine](integer) : "Cube Behavior" : 0
	CubeBehavior(choices) : "Cube Behavior" : 0 : "How does this cube function? Use a prop_monster_box for Frankenturrets." =
		[
		0: "Standard Cube"
		1: "Reflection Cube"
		2: "Sphere (presses sphere buttons)"
		3: "Schrodinger's Cube"
		]

	model[engine](studio) : "Model" : ""
	model(choices) : "Cube Model" : "models/props/cubes/standard_cube.mdl" : "What model to use. You can also type/paste in a custom model path here." =
		[
		"models/props/cubes/standard_cube.mdl": "Weighted Storage Cube"
		"models/props/cubes/standard_cube_rusty.mdl": "Weighted Storage Cube (rusty)"
		"models/props/cubes/companion_cube.mdl": "Weighted Companion Cube"
		"models/props/cubes/reflection_cube.mdl": "Discouragement Redirection Cube"
		"models/props/cubes/reflection_cube_rusty.mdl": "Discouragement Redirection Cube (rusty)"
		"models/props/cubes/sphere.mdl": "Edgeless Safety Cube"
		"models/props/cubes/antique_cube.mdl": "Antique Cube"
		"models/props/cubes/schrodinger_cube.mdl": "Schrodinger's Cube"
		]

	paintpower[engine](integer) : "Starting Paint" : 4
	paintpower(choices) : "Starting paint" : "4" : "The cube starts painted with the set gel." =
		[
		0: "Repulsion Gel"
		1: "Reflection Gel"
		2: "Propulsion Gel"
		3: "Conversion Gel"
		4: "None"
		5: "Adhesion Gel"
		]

	allowfunnel(boolean) : "Allow Portal Funneling" : 1 : "Whether or not this object should auto-funnel into a floor portal."
	
	uselasermodifier(boolean) : "Use Laser Modifier" : 0 : "If enabled, this cube will recolor incoming lasers to the modifier color."
	reflectmodifycolor(choices) : "Laser Modifier Color" : "255 0 0 255" : "Set reflected lasers to this color. Only applicable to reflection and Schrodinger cubes. You can also specify a custom RGBA color here." =
		[
		"255 255 255 255" : "White"
		"255 0 0 255" : "Default Red"
		"100 255 100 255" : "Lethal Green"
		"32 112 202 255" : "Blue"
		"255 212 91 255" : "Yellow"
		"212 60 146 255" : "Pink"
		"65 97 0 255" : "Dark Green"
		]
	uselaserfilter(boolean) : "Use Laser Filter" : 0 : "If enabled, this cube can only redirect lasers that match the filter color. If disabled, any laser color can be redirected."
	reflectfiltercolor(choices) : "Laser Filter Color" : "255 0 0 255" : "Filter reflected lasers by this color. Only applicable to reflection and Schrodinger cubes. You can also specify a custom RGBA color here." =
		[
		"255 255 255 255" : "White"
		"255 0 0 255" : "Default Red"
		"100 255 100 255" : "Lethal Green"
		"32 112 202 255" : "Blue"
		"255 212 91 255" : "Yellow"
		"212 60 146 255" : "Pink"
		"65 97 0 255" : "Dark Green"
		]

	line_cube_oldskins(string) readonly : "----------------------------------------------------------------------------------------------------------"

	newskins[engine](integer) : "Configuration Mode" : 2
	newskins(choices) : "Configuration Mode" : 2 : "How cube models and behaviors are selected. This determines which of the other keyvalues are used and is present for backwards compatibility." =
		[
		2: "New style (behavior/model)"
		1: "Old style (cube type/skin type)"
		0: "Oldest style (skin)"
		]

	cubetype[engine](integer) : "Cube Type (old)" : 0
	cubetype(choices) : "Cube Type (old)" : 0 : "The old cube type keyvalue, which overrides the model and behavior." =
		[
		0: "[0] Weighted Storage Cube"
		1: "[1] Weighted Companion Cube"
		2: "[2] Discouragement Redirection Cube"
		3: "[3] Edgeless Safety Cube"
		4: "[4] Antique Storage Cube"
		5: "[5] Schrodinger's Cube"
		6: "Custom model (old)"
		]

	skintype[engine](boolean) : "Skin Type (old)" : 0
	skintype(choices) : "Skin Type (old)" : 0 : "The old skin type keyvalue. Storage and Reflection cubes are the only types with a rusty version." =
		[
		0: "Clean"
		1: "Rusted"
		]

	skin(integer) : "Skin" : 0 : "The old skin keyvalue, mainly to show in Hammer."

	// Inputs
	input EnablePortalFunnel(void) : "Enable portal funneling behavior."
	input DisablePortalFunnel(void) : "Disable portal funneling behavior."
	input EnableMotion(void) : "Allow physics simulation."
	input DisableMotion(void) : "Prevent Physics simulation, freezing the cube in place."
	input ExitDisabledState(void) : "Exits the disabled state of a reflective cube."
	input SetPaint(integer) : "Force the cube to be painted with 0 (Repulsion), 2 (Propulsion), or 4 (No) gel."

	input SetReflectModifyColor(color255) : "Changes the laser modifier colour of the cube."
	input SetReflectFilterColor(color255) : "Changes the laser filter colour of the cube."
	input EmitLaser(boolean) : "Makes this cube emit or stop emitting its own laser."
	input LockEmitState(boolean) : "Locks the current laser state of the cube. Can still be changed with EmitLaser."

	// Outputs
	output OnOrangePickUp(void) : "P-Body picked up the cube."
	output OnBluePickUp(void) : "ATLAS picked up the cube."
	output OnPlayerPickup(void) : "Any player picked up the cube."
	output OnPhysGunDrop(void) : "Any player dropped the cube."
	output OnPainted(integer) : "Cube got painted, only if the state changed. Has the paint type as parameter."
	output OnPowered(void) : "Cube got powered by a laser."
	output OnUnpowered(void) : "Cube is no longer powered by a laser."
	output OnActivated(void) : "Fired when a cube is placed on a button."
	output OnDeactivated(void) : "Fired when a cube is removed from a button."
	]
